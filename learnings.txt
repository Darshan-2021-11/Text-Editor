1. Information about Makefiles, its syntax.
	To find more about Makefiles, read Makefiles documentation on www.gnu.org.

2. Different gcc flags such as 
	`-Wall`-enables compilers all error messages,
	`-Wextra`-enables some of the extra warnings that goes unnoticed by default `-Wall` tag,
	`-Werror`-treats all warnings as errors,
	`-pedantic`-issues all warnings demanded by strict ISO C & ISO C++ and rejects programs using forbidden extensions or follow ISO norms,
	`-ggdb`-produce debug information for use by GDB,
	`-I{path/to/dir}`-searches for header files to include in the program,
	`-L{path/to/dir}`-location to search for shared library,
	`-l{library/name}`-name of the library shared with the project,
	`-g{0-3}`-gives debug information in operating system native format(you can specify levels of it by giving levels inside braces from 0-3),
	`-O{0-3}`-optimises compilation, takes more time and memory for larger function,
	etc.

	To find more flags of the gcc compiler, search for `important gcc flags` in internet or read `gcc documentation`.

3. An evil hack to use `make` keyword to run Makefile argument that is native to linux is done by making a batch file named `make.bat` and giving it the commands
	"""
		@ECHO OFF
		mingw32-make $1
	"""

	which takes advantage of the fact that mingw32-make comes packed with mingw, in the same `bin` folder as that of `gcc.exe` or `g++.exe`, so the batch files runs mingw32-make with the argument given to the bat file (denoted by $1, slight digression but we can take 9 arguments in batch file with `${1-9}` being them in same order as passed) and the given files can be compiled.

	Infact, you can use more than 9 input arguments in a batch file, search it in the internet for more info.	